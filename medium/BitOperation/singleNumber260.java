package medium.BitOperation;

/**
 * @Time : 2020年3月27日19:07:38
 * @Author : yyw@ustc
 * @E-mail : yang0@mail.ustc.edu.cn
 * @Github : https://github.com/ustcyyw
 * @desc : 已总结
 */

/**
 * 给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。
 *
 * 示例 :
 * 输入: [1,2,1,3,2,5]
 * 输出: [3,5]
 * 注意：
 *
 * 结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。
 * 你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/single-number-iii
 */
public class singleNumber260 {
    /**
     * 异或的交换律，x ^ x = 0, x ^ 0 = x
     * 将数组中的所有元素进行异或，最后剩下的是只出现一次的两个数的异或
     * 这两个数无法进行区分，如果数组中只有一个元素出项一次，就可以得到它
     * 所以这里考虑是否可以将两个只出现一次的元素分在不同的组合中，这两个组合中别的元素都出现了两次。
     * 两个不相同的数，二进制表示时，至少有某一位不相等，在该位异或的结果为1
     * 有一个技巧 x & -x 得到的是x的位级表示中最低的那一位 1 也就是 该数有且仅有一位是1，即x最低位1所在的那位，其余都是0
     * 比如 x = 10110100，-x 得到 01001100，相与得到 00000100。
     * 所以对目标的两个数的异或结果 two 进行 two & -two 就可以知道他们第一个不相同的位。
     * 通过这一位，就可以将原数组分成两部分，两个要找的数分别在两个部分。
     * 比如 two & -two = 0100。那么分开的两部分中，一部分的元素第3位均为1，另外一部分元素第3为均为0.通过与 0100 取与之后是否为0来判断
     * 除了要找的两个元素，其余元素都是成对出现，会被成对分到两部分中。
     * 这就转化成了，一个数组中，只有一个元素只出现一次，其余全都成对出现的情况。
     */

    /**
     * 执行用时 :1 ms, 在所有 Java 提交中击败了100.00%的用户
     * 内存消耗 :42.1 MB, 在所有 Java 提交中击败了5.41%的用户
     */
    public int[] singleNumber(int[] nums) {
        int two = 0;
        for(int i : nums)
            two ^= i;
        int mask = two & (-two);
        int temp = 0;
        for(int i : nums){
            if((i & mask) == 0) temp ^= i;
        }
        return new int[]{temp, two ^ temp};
    }
}
