package easy.BitOperation;

/**
 * @Time : 2020年3月28日09:15:02
 * @Author : yyw@ustc
 * @E-mail : yang0@mail.ustc.edu.cn
 * @Github : https://github.com/ustcyyw
 * @desc :
 */

/**
 * 颠倒给定的 32 位无符号整数的二进制位。
 *
 * 示例 1：
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 *
 *  示例 2：
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
 *  
 *
 * 提示：
 *
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。
 * 在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 *  
 *
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/reverse-bits
 */
public class reverseBits {
    /**
     * 执行用时 :2 ms, 在所有 Java 提交中击败了16.14%的用户
     * 内存消耗 :38.2 MB, 在所有 Java 提交中击败了5.27%的用户
     */
    public int reverseBits(int n) {
        if(n == 1) // 0001 翻转之后符号位为1，其余为0，是特殊的最小值
            return Integer.MIN_VALUE;
        int[] bits = getBit(n);
        if(bits[31] == 1){ // 说明这是一个负数，先转为反码（-1） 再转成原码（除符号位之外 取反）
            for(int i = 0; i < 32; i++){
                if(bits[i] == 0) bits[i] = 1;
                else {
                    bits[i] = 0;
                    break;
                }
            }
            for(int i = 0; i < 31; i++){
                if(bits[i] == 0) bits[i] = 1;
                else bits[i] = 0;
            }
        }

        int product = (n & 1) == 1 ? -1 : 1;
        int res = 0;
        for(int i = 0; i < 31; i++){
            res += product * bits[i];
            product *= 2;
        }
        return res;
    }

    private int[] getBit(int n){
        int[] res = new int[32];
        int index = 31;
        while(n != 0){
            if((n & 1) == 1)
                res[index] = 1;
            index--;
            n >>>= 1;
        }
        return res;
    }

    /**
     * 评论区别人的做法
     * 举个例子 0101 翻转之后为 1010 = 1000 + 0000 + 0010 + 0000
     * 首先第一位翻转后成为第四位 将0001左移3位 1000
     * 第二位翻转之后在第三位，将0000左移2位 0000
     * 第三位翻转后再第二位，将0001 左移一位 0010
     * 所以从低位往高位，依次将该为数字 1或者0通过移位得到翻转后该位对应的数，然后相加就是答案
     *
     * 执行用时 :1 ms, 在所有 Java 提交中击败了100.00%的用户
     * 内存消耗 :38.3 MB, 在所有 Java 提交中击败了5.27%的用户
     */
    public int reverseBits2(int n) {
        int res = 0;
        for(int i = 31; i >= 0 && n != 0; i--){
            res += (n & 1) << i;
            n >>>= 1;
        }
        return res;
    }
}
